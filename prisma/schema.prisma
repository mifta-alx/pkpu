generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DEV_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  roleId    Int        @default(3)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Role      Role       @relation(fields: [roleId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Kreditor  Kreditor[]
  Tagihan   Tagihan[]
}

model UserVerify {
  email          String   @id @unique
  uniqueCode     String   @unique @db.VarChar(25)
  expirationDate DateTime
}

model Role {
  id   Int    @id @default(autoincrement())
  name String
  User User[]
}

model Debitor {
  id           Int       @id @default(autoincrement())
  nama         String
  tglSidang    String
  tempatSidang String
  Tagihan      Tagihan[]
}

model Kreditor {
  id      Int       @id @default(autoincrement())
  userId  Int
  nama    String
  email   String    @unique
  alamat  String    @db.Text
  noTelp  String    @db.VarChar(13)
  User    User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Tagihan Tagihan[]
}

model Tagihan {
  id              Int              @id @default(autoincrement())
  debitorId       Int
  userId          Int
  kreditorId      Int
  pertanggal      String
  hutangPokok     String
  bunga           String
  denda           String
  sifatTagihanId  Int
  jumlahTagihan   String
  mulaiTertunggak String
  jumlahHari      String
  status          Int              @default(0)
  DokumenTagihan  DokumenTagihan[]
  Debitor         Debitor          @relation(fields: [debitorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User            User             @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Kreditor        Kreditor         @relation(fields: [kreditorId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  sifatTagihan    SifatTagihan     @relation(fields: [sifatTagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model SifatTagihan {
  id          Int           @id @default(autoincrement())
  sifat       String
  Tagihan     Tagihan[]
  TipeDokumen TipeDokumen[]
}

model TipeDokumen {
  id             Int              @id @default(autoincrement())
  tipe           String
  sifatTagihanId Int
  DokumenTagihan DokumenTagihan[]
  SifatTagihan   SifatTagihan     @relation(fields: [sifatTagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model DokumenTagihan {
  id            Int         @id @default(autoincrement())
  tipeDokumenId Int
  tagihanId     Int
  dokumen       String
  Tagihan       Tagihan     @relation(fields: [tagihanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  TipeDokumen   TipeDokumen @relation(fields: [tipeDokumenId], references: [id], onUpdate: Cascade, onDelete: Cascade)
}

model Verified {
  id        Int      @id @default(autoincrement())
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
